++++
/controllers/Product.js 

class Product {
    async getAll(req, res) {
        res.status(200).send('Список всех товаров')
    }

    async getOne(req, res) {
        res.status(200).send('Получение одного товара')
    }

    async create(req, res) {
        res.status(200).send('Создание нового товара')
    }

    async update(req, res) {
        res.status(200).send('Обновление товара')
    }

    async delete(req, res) {
        res.status(200).send('Удаление товара')
    }
}

export default new Product()

+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-
было
    router.get('/getall', (req, res) => res.status(200).send('Список всех товаров'))
    router.get('/getone/:id([0-9]+)', (req, res) => res.status(200).send('Получение одного товара'))
    router.post('/create', (req, res) => res.status(200).send('Создание нового товара'))
    router.put('/update/:id([0-9]+)', (req, res) => res.status(200).send('Обновление товара'))
    router.delete('/delete/:id([0-9]+)', (req, res) => res.status(200).send('Удаление товара'))

стало
    import ProductController from '../controllers/Product.js'
    ...
    router.get('/getall', ProductController.getAll)
    router.get('/getone/:id([0-9]+)', ProductController.getOne)
    router.post('/create', ProductController.create)
    router.put('/update/:id([0-9]+)', ProductController.update)
    router.delete('/delete/:id([0-9]+)', ProductController.delete)
===========================
ошибки
+++ 
/errors/AppError
class AppError {
    constructor
    static badRequest    // 404
    static internalServerError // 500
    static forbidden    // 403
}


/middleware/ErrorHandler
import AppError

const ErrorHandler = (err,req,res,next)
    return res.status(err.status).json({message:err.message})
    ....
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
index
    import ErrorHandler 

    ...
    use(ErrorHandler)     // middleware.ErrorHandler должен быть последним и в нем не должно быть вызова next().
    ...